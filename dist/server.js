"use strict";
var express = require("express");
var path = require("path");
var Middlewares = require("./api/middlewares/base/BaseMiddlewares");
var PORT = process.env.PORT || 3000;
var app = express();
app.use(Middlewares.configuration);
app.use("/app", express.static(path.resolve(__dirname, "app")));
app.use("/libs", express.static(path.resolve(__dirname, "libs")));
app.get("/*", function (req, res) {
    res.sendFile(path.resolve(__dirname, "index.html"));
});
// catch 404 and forward to error handler
app.use(function (req, res, next) {
    var err = new Error("Not Found");
    err["status"] = 404;
    next(err);
});
// development error handler will print stacktrace
if (app.get("env") === "development") {
    app.use(function (err, req, res, next) {
        res.status(err["status"] || 500);
        res.render("error", { message: err.message, error: err });
    });
}
// production error handler no stacktraces leaked to user
app.use(function (err, req, res, next) {
    res.status(err["status"] || 500);
    res.render("error", { message: err.message, error: {} });
});
var server = app.listen(PORT, function () {
    var host = server.address().address;
    var port = server.address().port;
    console.log("This express app is listening on port:" + port);
});

//# sourceMappingURL=data:application/json;base64,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b3J0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5pbXBvcnQgTWlkZGxld2FyZXMgPSByZXF1aXJlKFwiLi9hcGkvbWlkZGxld2FyZXMvYmFzZS9CYXNlTWlkZGxld2FyZXNcIik7XG5cbmNvbnN0IFBPUlQ6IG51bWJlciA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcblxubGV0IGFwcCA9IGV4cHJlc3MoKTtcblxuYXBwLnVzZShNaWRkbGV3YXJlcy5jb25maWd1cmF0aW9uKTtcbmFwcC51c2UoXCIvYXBwXCIsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiYXBwXCIpKSk7XG5hcHAudXNlKFwiL2xpYnNcIiwgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCJsaWJzXCIpKSk7XG5cbmFwcC5nZXQoXCIvKlwiLCAocmVxLCByZXMpID0+IHtcbiAgICByZXMuc2VuZEZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCJpbmRleC5odG1sXCIpKTtcbn0pO1xuXG4vLyBjYXRjaCA0MDQgYW5kIGZvcndhcmQgdG8gZXJyb3IgaGFuZGxlclxuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICBsZXQgZXJyID0gbmV3IEVycm9yKFwiTm90IEZvdW5kXCIpO1xuICAgIGVycltcInN0YXR1c1wiXSA9IDQwNDtcbiAgICBuZXh0KGVycik7XG59KTtcblxuLy8gZGV2ZWxvcG1lbnQgZXJyb3IgaGFuZGxlciB3aWxsIHByaW50IHN0YWNrdHJhY2VcbmlmIChhcHAuZ2V0KFwiZW52XCIpID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICBhcHAudXNlKChlcnI6IGFueSwgcmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgICAgcmVzLnN0YXR1cyhlcnJbXCJzdGF0dXNcIl0gfHwgNTAwKTtcbiAgICAgICAgcmVzLnJlbmRlcihcImVycm9yXCIsIHsgbWVzc2FnZTogZXJyLm1lc3NhZ2UsIGVycm9yOiBlcnIgfSk7XG4gICAgfSk7XG59XG5cbi8vIHByb2R1Y3Rpb24gZXJyb3IgaGFuZGxlciBubyBzdGFja3RyYWNlcyBsZWFrZWQgdG8gdXNlclxuYXBwLnVzZSgoZXJyOiBhbnksIHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgcmVzLnN0YXR1cyhlcnJbXCJzdGF0dXNcIl0gfHwgNTAwKTtcbiAgICByZXMucmVuZGVyKFwiZXJyb3JcIiwgeyBtZXNzYWdlOiBlcnIubWVzc2FnZSwgZXJyb3I6IHt9IH0pO1xufSk7XG5cbmxldCBzZXJ2ZXIgPSBhcHAubGlzdGVuKFBPUlQsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgaG9zdCA9IHNlcnZlci5hZGRyZXNzKCkuYWRkcmVzcztcbiAgICBsZXQgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydDtcblxuICAgIGNvbnNvbGUubG9nKFwiVGhpcyBleHByZXNzIGFwcCBpcyBsaXN0ZW5pbmcgb24gcG9ydDpcIiArIHBvcnQpO1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
