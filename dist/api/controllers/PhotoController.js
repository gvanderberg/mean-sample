"use strict";
var PhotoBusiness = require("./../business/PhotoBusiness");
var PhotoController = (function () {
    function PhotoController() {
    }
    PhotoController.prototype.create = function (req, res) {
        try {
            var data = req.body;
            var business = new PhotoBusiness();
            business.create(data, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json({ "success": "success" });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    PhotoController.prototype.delete = function (req, res) {
        try {
            var id = req.params._id;
            var business = new PhotoBusiness();
            business.delete(id, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json({ "success": "success" });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    PhotoController.prototype.findById = function (req, res) {
        try {
            var id = req.params._id;
            var business = new PhotoBusiness();
            business.findById(id, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    PhotoController.prototype.retrieve = function (req, res) {
        try {
            var business = new PhotoBusiness();
            business.retrieve(function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    PhotoController.prototype.update = function (req, res) {
        try {
            var id = req.params._id;
            var data = req.body;
            var business = new PhotoBusiness();
            business.update(id, data, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json({ "success": "success" });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    return PhotoController;
}());
module.exports = PhotoController;

//# sourceMappingURL=data:application/json;base64,
