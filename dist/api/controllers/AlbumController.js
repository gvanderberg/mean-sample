"use strict";
var AlbumBusiness = require("./../business/AlbumBusiness");
var AlbumController = (function () {
    function AlbumController() {
    }
    AlbumController.prototype.create = function (req, res) {
        try {
            var data = req.body;
            var business = new AlbumBusiness();
            business.create(data, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json({ "success": true });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    AlbumController.prototype.delete = function (req, res) {
        try {
            var id = req.params._id;
            var business = new AlbumBusiness();
            business.delete(id, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json({ "success": true });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    AlbumController.prototype.findById = function (req, res) {
        try {
            var id = req.params._id;
            var business = new AlbumBusiness();
            business.findById(id, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    AlbumController.prototype.retrieve = function (req, res) {
        try {
            var page = req.params.page;
            var pageSize = req.params.pageSize;
            var business = new AlbumBusiness();
            business.fetch(page, pageSize, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    AlbumController.prototype.update = function (req, res) {
        try {
            var id = req.params._id;
            var data = req.body;
            var business = new AlbumBusiness();
            business.update(id, data, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json({ "success": true });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    return AlbumController;
}());
module.exports = AlbumController;

//# sourceMappingURL=data:application/json;base64,
