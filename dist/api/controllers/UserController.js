"use strict";
var UserBusiness = require("./../business/UserBusiness");
var UserController = (function () {
    function UserController() {
    }
    UserController.prototype.create = function (req, res) {
        try {
            var user = req.body;
            var business = new UserBusiness();
            business.create(user, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json({ "success": "success" });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    UserController.prototype.delete = function (req, res) {
        try {
            var id = req.params._id;
            var business = new UserBusiness();
            business.delete(id, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json({ "success": "success" });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    UserController.prototype.findById = function (req, res) {
        try {
            var id = req.params._id;
            var business = new UserBusiness();
            business.findById(id, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    UserController.prototype.retrieve = function (req, res) {
        try {
            var business = new UserBusiness();
            business.retrieve(function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    UserController.prototype.update = function (req, res) {
        try {
            var _id = req.params._id;
            var user = req.body;
            var business = new UserBusiness();
            business.update(_id, user, function (error, result) {
                if (error) {
                    res.send(error);
                }
                else {
                    res.json({ "success": "success" });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    return UserController;
}());
module.exports = UserController;

//# sourceMappingURL=data:application/json;base64,
